# 1. Base Image for Dependencies
# Using node:18-alpine as it's a lightweight and secure base
FROM node:18-alpine AS deps
WORKDIR /app

# Copy package.json and lock files
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./

# Install dependencies based on the lock file
# This leverages Docker's layer caching
RUN \
  npm install --force


# 2. Builder Stage
# This stage builds the Next.js application
FROM node:18-alpine AS builder
WORKDIR /app

# Copy dependencies from the 'deps' stage
COPY --from=deps /app/node_modules ./node_modules
# Copy the rest of the application source code
COPY . .

# Set NEXT_TELEMETRY_DISABLED to 1 to disable telemetry during build
ENV NEXT_TELEMETRY_DISABLED 1

# Build the Next.js application
RUN npm run build


# 3. Runner Stage
# This is the final, lightweight image that will run in production
FROM node:18-alpine AS runner
WORKDIR /app

# Set the environment to production
ENV NODE_ENV production
# Disable telemetry in the final image
ENV NEXT_TELEMETRY_DISABLED 1

# Create a non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the standalone output from the builder stage
# This includes only the necessary files to run the app
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# Copy the public assets and static files
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to the non-root user
USER nextjs

# Expose the port the app will run on
EXPOSE 3000

# Set the default command to start the server
CMD ["node", "server.js"]
